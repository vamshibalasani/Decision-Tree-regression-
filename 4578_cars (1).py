# -*- coding: utf-8 -*-
"""4578_cars.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ryUx0_u6VIoMqmxcVgg-GKYCJJjRCG2J

**Problem Statement:**
The objective of the project is to develop a predictive model that can accurately estimate the value of second hand vehicles based on varous factors such as model,year,present price,kms driven,fueltype,sellertype,transmission.The goal is to crete a model that can provide reliable estimates of the resale value of used cars for buyers and sellers a like and also help delarship.

Importing the required libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#numpy-NumPy is a Python library used for working with arrays.
#pandas-Pandas is a Python library used for working with data sets.

"""**Reading and understanding the data**"""

cars = pd.read_csv("/content/car data.csv")

cars.head()

cars.tail()

cars.shape

cars.describe()

cars.info()

#Checking the null values.
cars.isnull().sum()

#checking the columns present in the dataset.
cars.columns

#checking the count of a fuel_types present in the columns.
print(cars['Fuel_Type'].value_counts())

cars.select_dtypes(include='object').columns

plt.figure(figsize=(6,6))
sns.countplot(x= 'Fuel_Type', data=cars)
plt.title('fuel_type')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x= 'Transmission', data=cars)
plt.title('transmission')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x= 'Seller_Type', data=cars)
plt.title('sellertype')
plt.show()

#Used one hot encoder to create a dummy column.
cars= pd.get_dummies(cars, columns=['Fuel_Type', 'Seller_Type', 'Transmission'], drop_first=True)

cars.head()

#checking the distrubtion of the data.
plt.figure(figsize=(6,6))
sns.distplot(cars['Present_Price'])
plt.title('presentprice')
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(cars['Kms_Driven'])
plt.title('kmsdriven')
plt.show()

#checking the outliers.
fig = plt.subplots(figsize=(15,15))
sns.boxplot(data=cars, width=0.5)

#Removing outliers.
q = cars["Kms_Driven"].quantile(0.98)
df = cars[cars["Kms_Driven"]<q]

fig = plt.subplots(figsize=(15,15))
sns.boxplot(data=df, width=0.5)

df.describe()

#checking the correlation.
plt.figure(figsize=(10,7))
sns.heatmap(df.corr(), annot=True)
plt.title('correlation between the columns')
plt.show()

train = df.sample(frac=0.70, random_state=151)
test = df.drop(train.index)

X_train = train.drop('Selling_Price', axis=1)
y_train = train['Selling_Price']
X_test = test.drop('Selling_Price', axis=1)
y_test = test['Selling_Price']

class Node():
    def __init__(self, feature_index=None, threshold=None, left=None, right=None, var_red=None, value=None):
        ''' constructor ''' 
        
        # for decision node
        self.feature_index = feature_index
        self.threshold = threshold
        self.left = left
        self.right = right
        self.var_red = var_red
        
        # for leaf node
        self.value = value

class DecisionTreeRegressor():
    def __init__(self, min_samples_split=2, max_depth=2):
        ''' constructor '''
        
        # initialize the root of the tree 
        self.root = None
        
        # stopping conditions
        self.min_samples_split = min_samples_split
        self.max_depth = max_depth
        
    def build_tree(self, cars, curr_depth=0):
        ''' recursive function to build the tree '''
        
        X, Y = cars[:,:-1], cars[:,-1]
        num_samples, num_features = np.shape(X)
        best_split = {}
        # split until stopping conditions are met
        if num_samples>=self.min_samples_split and curr_depth<=self.max_depth:
            # find the best split
            best_split = self.get_best_split(cars, num_samples, num_features)
            # check if information gain is positive
            if best_split["var_red"]>0:
                # recur left
                left_subtree = self.build_tree(best_split["cars_left"], curr_depth+1)
                # recur right
                right_subtree = self.build_tree(best_split["cars_right"], curr_depth+1)
                # return decision node
                return Node(best_split["feature_index"], best_split["threshold"], 
                            left_subtree, right_subtree, best_split["var_red"])
        
        # compute leaf node
        leaf_value = self.calculate_leaf_value(Y)
        # return leaf node
        return Node(value=leaf_value)
    
    def get_best_split(self, cars, num_samples, num_features):
        ''' function to find the best split '''
        
        # dictionary to store the best split
        best_split = {}
        max_var_red = -float("inf")
        # loop over all the features
        for feature_index in range(num_features):
            feature_values = cars[:, feature_index]
            possible_thresholds = np.unique(feature_values)
            # loop over all the feature values present in the data
            for threshold in possible_thresholds:
                # get current split
                cars_left, cars_right = self.split(cars, feature_index, threshold)
                # check if childs are not null
                if len(cars_left)>0 and len(cars_right)>0:
                    y, left_y, right_y = cars[:, -1], cars_left[:, -1], cars_right[:, -1]
                    # compute information gain
                    curr_var_red = self.variance_reduction(y, left_y, right_y)
                    # update the best split if needed
                    if curr_var_red>max_var_red:
                        best_split["feature_index"] = feature_index
                        best_split["threshold"] = threshold
                        best_split["cars_left"] = cars_left
                        best_split["cars_right"] = cars_right
                        best_split["var_red"] = curr_var_red
                        max_var_red = curr_var_red
                        
        # return best split
        return best_split
    
    def split(self, cars, feature_index, threshold):
        ''' function to split the data '''
        
        cars_left = np.array([row for row in cars if row[feature_index]<=threshold])
        cars_right = np.array([row for row in cars if row[feature_index]>threshold])
        return cars_left, cars_right
    
    def variance_reduction(self, parent, l_child, r_child):
        ''' function to compute variance reduction '''
        
        weight_l = len(l_child) / len(parent)
        weight_r = len(r_child) / len(parent)
        reduction = np.var(parent) - (weight_l * np.var(l_child) + weight_r * np.var(r_child))
        return reduction
    
    def calculate_leaf_value(self, Y):
        ''' function to compute leaf node '''
        
        val = np.mean(Y)
        return val
                
    def print_tree(self, tree=None, indent=" "):
        ''' function to print the tree '''
        
        if not tree:
            tree = self.root

        if tree.value is not None:
            print(tree.value)

        else:
            print("X_"+str(tree.feature_index), "<=", tree.threshold, "?", tree.var_red)
            print("%sleft:" % (indent), end="")
            self.print_tree(tree.left, indent + indent)
            print("%sright:" % (indent), end="")
            self.print_tree(tree.right, indent + indent)
    
    def fit(self, X, Y):
        ''' function to train the tree '''
        
        dataset = np.concatenate((X, Y), axis=1)
        self.root = self.build_tree(dataset)
        
    def make_prediction(self, x, tree):
        ''' function to predict new dataset '''
        
        if tree.value!=None: return tree.value
        feature_val = x[tree.feature_index]
        if feature_val<=tree.threshold:
            return self.make_prediction(x, tree.left)
        else:
            return self.make_prediction(x, tree.right)
    
    def predict(self, X):
        ''' function to predict a single data point '''
        
        preditions = [self.make_prediction(x, self.root) for x in X]
        return preditions

regressor = DecisionTreeRegressor(min_samples_split=3, max_depth=3)
regressor.fit(X_train,Y_train)
regressor.print_tree()

def mean_squared_error(Y_true, Y_pred):
    # Compute the mean squared error between Y_true and Y_pred
    mse = np.mean((Y_true - Y_pred)**2)
    return mse

Y_pred = regressor.predict(X_test)
mse = mean_squared_error(Y_test, Y_pred)
print("Test MSE: ", mse)

def accuracy_score(y_true,Y_pred):
  correct=0
  for i in range(len(y_true)):
    if y_true[i] == Y_pred[i]:
      correct += 1
  return correct / float(len(y_true))

accuracy = accuracy_score(Y_test,Y_pred)
print("Accuracy",accuracy)

